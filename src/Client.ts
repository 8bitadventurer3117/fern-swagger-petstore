/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Pet } from "./api/resources/pet/client/Client";
import { Store } from "./api/resources/store/client/Client";
import { User } from "./api/resources/user/client/Client";

export declare namespace BitadventurerApiClient {
    interface Options {
        environment?: core.Supplier<environments.BitadventurerApiEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the api_key header */
        apiKey: core.Supplier<string>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the api_key header */
        apiKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class BitadventurerApiClient {
    constructor(protected readonly _options: BitadventurerApiClient.Options) {}

    protected _pet: Pet | undefined;

    public get pet(): Pet {
        return (this._pet ??= new Pet(this._options));
    }

    protected _store: Store | undefined;

    public get store(): Store {
        return (this._store ??= new Store(this._options));
    }

    protected _user: User | undefined;

    public get user(): User {
        return (this._user ??= new User(this._options));
    }
}
